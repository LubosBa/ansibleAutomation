# ---------------------------------- Cluster -----------------------------------
cluster.name: "{{ clusterName }}"
#
# ------------------------------------ Node ------------------------------------
#
node.name: "{{ ansible_hostname }}"
{% if ansible_hostname | regex_replace('.*(?P<id>\d+$)', '\\g<id>') | int is divisibleby 2 %}
node.attr.zone: DC1
{% else %}
node.attr.zone: DC2
{% endif %}

cluster.routing.allocation.awareness.attributes: zone
cluster.routing.allocation.awareness.force.zone.values: DC1, DC2

# Node role configuration.
{% if ansible_hostname | regex_search('(data)') %}
node.master: false
node.data: true
{% elif ansible_hostname | regex_search('(master)')  %}
node.master: true
node.data: false
{% else %}
node.master: true
node.data: true
{% endif %}

# ----------------------------------- Paths ------------------------------------

path.data: "{{ baseFolder }}/data"
path.logs: "{{ baseFolder }}/logs"  

# ----------------------------------- Memory -----------------------------------
bootstrap.memory_lock: true

# ---------------------------------- Network -----------------------------------

network.host: {{ ansible_eth1.ipv4.address }}

#
# Set a custom port for HTTP:
http.port: 9200
transport.tcp.port: 9300

# --------------------------------- Discovery ----------------------------------
discovery.zen.ping.unicast.hosts: [{% for host in groups['elasticsearch'] -%}
   {% if hostvars[host]['ansible_hostname'] | regex_search('(master)') %}"{{ hostvars[host]['ansible_eth1']['ipv4']['address'] }}"{% else %}"{{ hostvars[host]['ansible_eth1']['ipv4']['address'] }}"{% if not loop.last %}, {% endif %}{% endif %}
{%- endfor %}]


discovery.zen.minimum_master_nodes: 2
action.destructive_requires_name: true
